import React, { useState } from 'react';
import { TestResult } from '../SecurityLabDashboard';
import { CodeComparison } from '../CodeComparison';
import { LiveAttackTester } from '../LiveAttackTester';
import { RealTimeCodeSwitcher } from '../RealTimeCodeSwitcher';

interface VulnerabilityLabTemplateProps {
  title: string;
  description: string;
  vulnerableCode: string;
  secureCode: string;
  enabled: boolean;
  onToggle: () => void;
  testPayloads: string[];
  onTest: (vulnType: string, payload: string, target?: string) => Promise<TestResult>;
  testResults: TestResult[];
  vulnerabilityType: string;
  additionalContent?: React.ReactNode;
}

export const VulnerabilityLabTemplate: React.FC<VulnerabilityLabTemplateProps> = ({
  title,
  description,
  vulnerableCode,
  secureCode,
  enabled,
  onToggle,
  testPayloads,
  onTest,
  testResults,
  vulnerabilityType,
  additionalContent
}) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'code' | 'test'>('overview');

  const config = {
    enabled,
    vulnerableCode,
    secureCode,
    testPayloads,
    description,
    cweId: 'CWE-XXX' // This would be set per vulnerability
  };

  const tabs = [
    { id: 'overview', name: 'Overview', icon: 'ðŸ“‹' },
    { id: 'code', name: 'Code Analysis', icon: 'ðŸ’»' },
    { id: 'switcher', name: 'Code Switching', icon: 'ðŸ”„' },
    { id: 'test', name: 'Live Testing', icon: 'ðŸ§ª' }
  ];

  return (
    <div className="bg-white rounded-lg shadow-sm border">
      {/* Header */}
      <div className="p-6 border-b">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">{title}</h2>
            <p className="mt-1 text-gray-600">{description}</p>
          </div>
          
          <div className="flex items-center space-x-4">
            {/* Status badge */}
            <span
              className={`
                px-3 py-1 rounded-full text-sm font-medium
                ${enabled 
                  ? 'bg-red-100 text-red-800' 
                  : 'bg-green-100 text-green-800'
                }
              `}
            >
              {enabled ? 'VULNERABLE' : 'SECURE'}
            </span>
            
            {/* Toggle button */}
            <button
              onClick={onToggle}
              className={`
                px-4 py-2 rounded-lg font-medium transition-colors
                ${enabled
                  ? 'bg-green-600 hover:bg-green-700 text-white'
                  : 'bg-red-600 hover:bg-red-700 text-white'
                }
              `}
            >
              {enabled ? 'Enable Security' : 'Enable Vulnerability'}
            </button>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b">
        <nav className="flex space-x-8 px-6">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`
                py-4 px-1 border-b-2 font-medium text-sm transition-colors
                ${activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }
              `}
            >
              <span className="mr-2">{tab.icon}</span>
              {tab.name}
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      <div className="p-6">
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {additionalContent}
          </div>
        )}

        {activeTab === 'code' && (
          <CodeComparison
            vulnerableCode={vulnerableCode}
            secureCode={secureCode}
            enabled={enabled}
          />
        )}

        {activeTab === 'switcher' && (
          <RealTimeCodeSwitcher
            vulnerabilityType={vulnerabilityType}
            enabled={enabled}
            onToggle={onToggle}
            vulnerableCode={vulnerableCode}
            secureCode={secureCode}
          />
        )}

        {activeTab === 'test' && (
          <LiveAttackTester
            vulnerabilityType={vulnerabilityType}
            config={config as any}
            onTest={onTest}
            testResults={testResults}
          />
        )}
      </div>
    </div>
  );
};