version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: vulnerable-webapp-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - webapp-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    # Don't expose postgres port in production
    expose:
      - "5432"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: vulnerable-webapp-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      PORT: 3001
      CORS_ORIGIN: ${CORS_ORIGIN}
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-10485760}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - backend_uploads_prod:/app/uploads
      - backend_logs_prod:/app/logs
    networks:
      - webapp-network-prod
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    # Don't expose backend port directly in production
    expose:
      - "3001"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_APP_NAME: ${VITE_APP_NAME:-Vulnerable Task Manager}
        VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0}
    container_name: vulnerable-webapp-frontend-prod
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    networks:
      - webapp-network-prod
    security_opt:
      - no-new-privileges:true

  # Reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: vulnerable-webapp-nginx-prod
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - webapp-network-prod
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data_prod:
    driver: local
  backend_uploads_prod:
    driver: local
  backend_logs_prod:
    driver: local
  nginx_logs_prod:
    driver: local

networks:
  webapp-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16