import React, { useState } from 'react';
import { VulnerabilityConfig, TestResult } from './SecurityLabDashboard';
import { CodeComparison } from './CodeComparison';
import { LiveAttackTester } from './LiveAttackTester';
import { SQLInjectionLab } from './labs/SQLInjectionLab';
import { XSSLab } from './labs/XSSLab';
import { IDORLab } from './labs/IDORLab';
import { SessionManagementLab } from './labs/SessionManagementLab';
import { SSRFLFILab } from './labs/SSRFLFILab';
import { RealTimeCodeSwitcher } from './RealTimeCodeSwitcher';

interface VulnerabilityDetailViewProps {
  vulnerabilityType: string;
  config: VulnerabilityConfig;
  onToggle: () => void;
  onTest: (vulnType: string, payload: string, target?: string) => Promise<TestResult>;
  testResults: TestResult[];
}

export const VulnerabilityDetailView: React.FC<VulnerabilityDetailViewProps> = ({
  vulnerabilityType,
  config,
  onToggle,
  onTest,
  testResults
}) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'code' | 'test'>('overview');

  const getVulnerabilityInfo = () => {
    const info = {
      sqlInjection: {
        title: 'SQL Injection (CWE-89)',
        description: 'SQL injection occurs when user input is directly concatenated into SQL queries without proper sanitization or parameterization.',
        impact: 'Attackers can read, modify, or delete database data, potentially gaining unauthorized access to sensitive information.',
        commonPayloads: [
          "' OR '1'='1",
          "' UNION SELECT username, password FROM users--",
          "'; DROP TABLE users; --"
        ]
      },
      xss: {
        title: 'Cross-Site Scripting (CWE-79)',
        description: 'XSS vulnerabilities allow attackers to inject malicious scripts into web pages viewed by other users.',
        impact: 'Session hijacking, credential theft, defacement, and malicious redirects.',
        commonPayloads: [
          "<script>alert('XSS')</script>",
          "<img src=x onerror='alert(document.cookie)'>",
          "<svg onload='fetch(\"/steal\", {method:\"POST\", body:localStorage.token})'>"
        ]
      },
      idor: {
        title: 'Insecure Direct Object References (CWE-639)',
        description: 'IDOR occurs when applications expose direct references to internal objects without proper authorization checks.',
        impact: 'Unauthorized access to other users\' data and functionality.',
        commonPayloads: [
          'Increment/decrement object IDs in URLs',
          'Guess sequential identifiers',
          'Access administrative functions'
        ]
      },
      sessionManagement: {
        title: 'Insecure Session Management (CWE-384)',
        description: 'Weak session management includes insecure token storage, weak secrets, and improper session handling.',
        impact: 'Session hijacking, unauthorized access, and privilege escalation.',
        commonPayloads: [
          'Token stored in localStorage',
          'Weak JWT secrets',
          'Long token expiration times'
        ]
      },
      ssrfLfi: {
        title: 'Server-Side Request Forgery & Local File Inclusion (CWE-918)',
        description: 'SSRF allows attackers to make requests from the server to internal resources. LFI allows reading local files.',
        impact: 'Access to internal services, cloud metadata, and sensitive files.',
        commonPayloads: [
          'http://169.254.169.254/latest/meta-data/',
          'file:///etc/passwd',
          'http://localhost:6379/info'
        ]
      }
    };

    return info[vulnerabilityType as keyof typeof info] || info.sqlInjection;
  };

  const vulnInfo = getVulnerabilityInfo();

  // Render specialized lab component based on vulnerability type
  const renderLabComponent = () => {
    const labProps = {
      config,
      enabled: config.enabled,
      onToggle,
      onTest,
      testResults
    };

    switch (vulnerabilityType) {
      case 'sqlInjection':
        return <SQLInjectionLab {...labProps} />;
      case 'xss':
        return <XSSLab {...labProps} />;
      case 'idor':
        return <IDORLab {...labProps} />;
      case 'sessionManagement':
        return <SessionManagementLab {...labProps} />;
      case 'ssrfLfi':
        return <SSRFLFILab {...labProps} />;
      default:
        // Fallback to generic view
        return (
          <div className="bg-white rounded-lg shadow-sm border">
            <div className="p-6 border-b">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-gray-900">{vulnInfo.title}</h2>
                  <p className="mt-1 text-gray-600">{vulnInfo.description}</p>
                </div>
                
                <div className="flex items-center space-x-4">
                  <span
                    className={`
                      px-3 py-1 rounded-full text-sm font-medium
                      ${config.enabled 
                        ? 'bg-red-100 text-red-800' 
                        : 'bg-green-100 text-green-800'
                      }
                    `}
                  >
                    {config.enabled ? 'VULNERABLE' : 'SECURE'}
                  </span>
                  
                  <button
                    onClick={onToggle}
                    className={`
                      px-4 py-2 rounded-lg font-medium transition-colors
                      ${config.enabled
                        ? 'bg-green-600 hover:bg-green-700 text-white'
                        : 'bg-red-600 hover:bg-red-700 text-white'
                      }
                    `}
                  >
                    {config.enabled ? 'Secure Code' : 'Enable Vulnerability'}
                  </button>
                </div>
              </div>
            </div>
            
            <div className="p-6">
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Impact</h3>
                  <p className="text-gray-700">{vulnInfo.impact}</p>
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Common Attack Vectors</h3>
                  <ul className="space-y-2">
                    {vulnInfo.commonPayloads.map((payload, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <span className="text-red-500 mt-1">â€¢</span>
                        <code className="bg-gray-100 px-2 py-1 rounded text-sm font-mono">
                          {payload}
                        </code>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        );
    }
  };

  return renderLabComponent();
};